---
AWSTemplateFormatVersion: '2010-09-09'
Description: Democracy365 Api CloudFormation Template

Outputs:
  d365LambdaRoleArn:
    Description: The Arn of the lambda IAM role to use in d365stack-helpers
    Value: !GetAtt d365IAMLambdaRole.Arn
    Export:
      Name: !Sub '${AWS::StackName}-d365LambdaRoleArn'

  d365KMSKeyId:
    Description: The KMS Key (ID) to use in d365stack-helpers
    Value: !Ref d365KMSKey
    Export:
      Name: !Sub '${AWS::StackName}-d365KMSKeyId'
  
  d365Layer1Arn:
    Description: The Arn of LayerVersion1 to use in d365stack-helpers
    Value: !Ref d365Layer1
    Export:
      Name: !Sub '${AWS::StackName}-d365Layer1Arn'
  
  d365ApiEndpoint:
    Description: Api Endpoint
    Value: !GetAtt d365Api.ApiEndpoint

Parameters:
  VPCStackNameParameter:
    Type: String
    Default: d365stack-vpc
    Description: Enter the name of the stack that contains vpc resources

  RDSStackNameParameter:
    Type: String
    Default: d365stack-rds
    Description: Enter the name of the stack that contains rds resources

Resources:
  ## SQS
  d365SourceQueue:
    Type: AWS::SQS::Queue
    Properties:
      FifoQueue: 'true'
      # With this setting for FIFO queues, during the deduplication interval, Amazon SQS treats messages that are sent with identical content as duplicates and delivers only one copy of the message. Amazon SQS will use a SHA-256 hash to generate the message deduplication ID (a message attribute) using the body of the messageâ€”but not the attributes of the message.
      ContentBasedDeduplication: 'true'
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt d365DeadLetterQueue.Arn
        maxReceiveCount: 1
      # From SQS docs: The length of time during which a message will be unavailable after a message is delivered from the queue. This blocks other components from receiving the same message and gives the initial component (lambda in our case) time to process and delete the message from the queue.
      # From Lambda docs: To allow your function time to process each batch of records, set the source queue's visibility timeout to at least 6 times the timeout that you configure on your function. The extra time allows for Lambda to retry if your function execution is throttled while your function is processing a previous batch.
      # https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-visibility-timeout.html
      VisibilityTimeout: 18

  d365DeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      FifoQueue: 'true'

  d365IAMSQSPolicy1: 
    Type: AWS::SQS::QueuePolicy
    Properties: 
      Queues: 
        - !Ref d365SourceQueue
      PolicyDocument: 
        Statement: 
          - Effect: Allow
            Action: 
              - SQS:SendMessage
              - SQS:ReceiveMessage
            Resource: !GetAtt d365SourceQueue.Arn
            Principal:  
              AWS:
                - !Ref 'AWS::AccountId'
  
  d365IAMSQSPolicy2: 
    Type: AWS::SQS::QueuePolicy
    Properties: 
      Queues: 
        - !Ref d365DeadLetterQueue
      PolicyDocument: 
        Statement: 
          - Effect: Allow
            Action: 
              - SQS:SendMessage
              - SQS:ReceiveMessage
            Resource: !GetAtt d365DeadLetterQueue.Arn
            Principal:  
              AWS:
                - !Ref 'AWS::AccountId'
  
  ## KMS
  d365KMSKey:
    Type: AWS::KMS::Key
    Properties:
      Description: CMK for token signing and verification during auth
      KeySpec: RSA_2048
      KeyUsage: SIGN_VERIFY
      PendingWindowInDays: 7
      KeyPolicy:
        Version: '2012-10-17'
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
            Action: kms:*
            Resource: '*'
          - Sid: Allow access for Key Administrators
            Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:user/Administrator'
            Action:
              - kms:Create*
              - kms:Describe*
              - kms:Enable*
              - kms:List*
              - kms:Put*
              - kms:Update*
              - kms:Revoke*
              - kms:Disable*
              - kms:Get*
              - kms:Delete*
              - kms:TagResource
              - kms:UntagResource
              - kms:ScheduleKeyDeletion
              - kms:CancelKeyDeletion
            Resource: '*'
          - Sid: Allow use of the key
            Effect: Allow
            Principal:
              AWS:
                - !GetAtt d365IAMLambdaRole.Arn
                - !Sub 'arn:aws:iam::${AWS::AccountId}:user/Administrator'
            Action:
              - kms:DescribeKey
              - kms:GetPublicKey
              - kms:Sign
              - kms:Verify
            Resource: '*'
  
  ## IAM
  d365IAMLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      # Trust Policy
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: lambda.amazonaws.com
      ManagedPolicyArns:
        # Lambda vpc access execution role
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        # Lambda eni management access
        - arn:aws:iam::aws:policy/service-role/AWSLambdaENIManagementAccess
        # Lambda sqs queue access
        - arn:aws:iam::aws:policy/service-role/AWSLambdaSQSQueueExecutionRole
      Policies:
        - PolicyName: d365PolicyForLambdaRDSIAMConnection 
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: rds-db:connect
                Resource:
                  !Join
                    - ''
                    - - 'arn:aws:rds-db:'
                      - !Ref 'AWS::Region'
                      - ':'
                      - !Ref 'AWS::AccountId'
                      - ':'
                      - 'dbuser:'
                      # Import RDS Proxy Resource ID from rds stack
                      - Fn::ImportValue:
                         !Sub '${RDSStackNameParameter}-d365RDSProxy1ResourceID'
                      - '/*'
        - PolicyName: d365PolicyForLambdaSESPermission
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - ses:SendEmail
                  - ses:SendRawEmail
                "Resource": '*'
                

  # Allow API Gateway to send messages to SQS, and invoke lambdas.
  d365IAMApiGatewayRole:
    Type: AWS::IAM::Role
    Properties:
      # Trust Policy
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service:
                - apigateway.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs
      Policies:
        - PolicyName: d365PolicyForApiQueueConnection
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: sqs:SendMessage
                Resource: !GetAtt d365SourceQueue.Arn
        - PolicyName: d365PolicyForApiLambdaInvocation
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: lambda:InvokeFunction
                Resource: '*'        

  ## Api
  d365Api:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      # https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-cors.html
      # CorsConfiguration: Cors
      # This property is part of quick create. It specifies the credentials required for the integration, if any. For a Lambda integration, three options are available. To specify an IAM Role for API Gateway to assume, use the role's Amazon Resource Name (ARN). To require that the caller's identity be passed through from the request, specify arn:aws:iam::*:user/*. To use resource-based permissions on supported AWS services, specify null. Currently, this property is not used for HTTP integrations. Supported only for HTTP APIs.
      # CredentialsArn: String
      # Specifies whether clients can invoke your API by using the default execute-api endpoint. By default, clients can invoke your API with the default https://{api_id}.execute-api.{region}.amazonaws.com endpoint. To require that clients use a custom domain name to invoke your API, disable the default endpoint.
      # DisableExecuteApiEndpoint: Boolean
      # Rollback the API creation when a warning is encountered
      FailOnWarnings: 'true'
      # This property is part of quick create. If you don't specify a routeKey, a default route of $default is created. The $default route acts as a catch-all for any request made to your API, for a particular stage. The $default route key can't be modified. You can add routes after creating the API, and you can update the route keys of additional routes. Supported only for HTTP APIs.
      # RouteKey: String
      Body:
        openapi: "3.0.1"
        info:
          title: "d365TestApi"
          version: "2020-12-07 14:00:00UTC"
        paths:
          /read:
            get:
              responses:
                default:
                  description: "Default response for GET /read"
              security:
              - d365LambdaAuthorizer1: []    
              x-amazon-apigateway-integration:
                credentials: !GetAtt d365IAMApiGatewayRole.Arn
                payloadFormatVersion: "2.0"
                type: "aws_proxy"
                httpMethod: "POST"
                uri: !Sub 'arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/${d365Function1Alias1}/invocations'
                connectionType: "INTERNET"
          /signin1:
            post:
              responses:
                default:
                  description: "Default response for POST /signin1"
              x-amazon-apigateway-integration:
                credentials: !GetAtt d365IAMApiGatewayRole.Arn
                payloadFormatVersion: "2.0"
                type: "aws_proxy"
                httpMethod: "POST"
                uri: !Sub 'arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/${d365Function4Alias1}/invocations'
                connectionType: "INTERNET"
          /signin2:
            post:
              responses:
                default:
                  description: "Default response for POST /signin2"
              x-amazon-apigateway-integration:
                credentials: !GetAtt d365IAMApiGatewayRole.Arn
                payloadFormatVersion: "2.0"
                type: "aws_proxy"
                httpMethod: "POST"
                uri: !Sub 'arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/${d365Function5Alias1}/invocations'
                connectionType: "INTERNET"
          /signup:
            post:
              responses:
                default:
                  description: "Default response for POST /signup"
              x-amazon-apigateway-integration:
                credentials: !GetAtt d365IAMApiGatewayRole.Arn
                payloadFormatVersion: "2.0"
                type: "aws_proxy"
                httpMethod: "POST"
                uri: !Sub 'arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/${d365Function6Alias1}/invocations'
                connectionType: "INTERNET"
          /write:
            post:
              responses:
                default:
                  description: "Default response for POST /write"
              security:
              - d365LambdaAuthorizer1: []
              x-amazon-apigateway-integration:
                integrationSubtype: "SQS-SendMessage"
                credentials: !GetAtt d365IAMApiGatewayRole.Arn
                requestParameters:
                  # Messages that belong to the same message group are always processed one by one, in a strict order relative to the message group.
                  MessageGroupId: "$request.body.MessageGroupId"
                  # https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-develop-integrations-aws-services.html
                  MessageBody: "$request.body"
                  QueueUrl: !Ref d365SourceQueue
                payloadFormatVersion: "1.0"
                type: "aws_proxy"
                connectionType: "INTERNET"
                timeoutInMillis: 30000
        components:
          securitySchemes:
            d365LambdaAuthorizer1:
              type: "apiKey"
              name: "Authorization"
              in: "header"
              x-amazon-apigateway-authorizer:
                identitySource: "$request.header.Authorization"
                authorizerUri: !Sub 'arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/${d365Function3Alias1}/invocations'
                authorizerCredentials: !GetAtt d365IAMApiGatewayRole.Arn
                authorizerPayloadFormatVersion: "2.0"
                # Authorizer responses are being cached based on above identitySource: https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-lambda-authorizer.html#http-api-lambda-authorizer.caching
                authorizerResultTtlInSeconds: 5
                type: "request"
                enableSimpleResponses: true

  d365ApiStage:
    Type: 'AWS::ApiGatewayV2::Stage'
    Properties:
      StageName: dev
      ApiId: !Ref d365Api
      AutoDeploy: 'true'
  
  d365ApiDeployment:
    Type: 'AWS::ApiGatewayV2::Deployment'
    Properties:
      Description: d365 Development Api Deployment
      ApiId: !Ref d365Api
      StageName: !Ref d365ApiStage

  ## Lambda
  # function1, read
  d365Function1:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Code:
        S3Bucket: democracy365private
        S3Key: d365_function1.zip
        # Keeping here for reference. Comment out two S3 lines above if using property below.
        # ZipFile: |
        #   exports.handler = async function(event){
        #       console.log("d365Event: ", JSON.stringify(event, null, 2))
        #       const response = {
        #         statusCode: 200,
        #         body: JSON.stringify('Got Lambda?')
        #       }
        #       return response
        #   };
      Environment:
        Variables:
          REGION: us-east-1
          # This variable should be deleted or commented out once proxy goes live.
          DB_HOST:
            Fn::ImportValue:
              !Sub '${RDSStackNameParameter}-d365DBEndpoint'
          # This variable should be deleted or commented out once proxy goes live.
          DB_PASSWORD:
            !Join
              - ''
              - - '{{resolve:secretsmanager:'
                - Fn::ImportValue:
                    !Sub '${RDSStackNameParameter}-d365RDSSecret'
                - ':SecretString:password}}'
          PROXY_HOST:
            Fn::ImportValue:
              !Sub '${RDSStackNameParameter}-d365RDSProxy1Endpoint'
          DB_PORT: '5432'
          # Secrets stored in AWS Systems Manager Parameter Store.
          DB_USER: "{{resolve:ssm:d365_db_user:1}}"
          DB_NAME: "{{resolve:ssm:d365_db_name:1}}"
      Layers:
        - !Ref d365Layer1
      Role: !GetAtt d365IAMLambdaRole.Arn
      Runtime: nodejs12.x
      VpcConfig: 
        SecurityGroupIds: 
          - Fn::ImportValue:
              !Sub '${VPCStackNameParameter}-d365LambdaSecurityGroup'
        SubnetIds: 
          - Fn::ImportValue:
              !Sub '${VPCStackNameParameter}-d365PrivateSubnet1'
          - Fn::ImportValue:
              !Sub '${VPCStackNameParameter}-d365PrivateSubnet2'

  d365Layer1:
    Type: AWS::Lambda::LayerVersion
    Properties:
      CompatibleRuntimes:
        - nodejs12.x
      Content:
        S3Bucket: democracy365private
        S3Key: d365_layer1.zip
      Description: ONLY contains node-postgress (pg), for use in multiple functions
      LayerName: layer1
  
  d365Function1Version1:
    Type: AWS::Lambda::Version
    Properties:
      FunctionName: !Ref d365Function1
      Description: v1

  d365Function1Alias1:
    Type: AWS::Lambda::Alias
    Properties:
      FunctionName: !Ref d365Function1
      FunctionVersion: !GetAtt d365Function1Version1.Version
      Name: ALIAS1

  # function2, write
  d365Function2:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Code:
        S3Bucket: democracy365private
        S3Key: d365_function2.zip
      Environment:
        Variables:
          REGION: us-east-1
          # This variable should be deleted or commented out once proxy goes live.
          DB_HOST:
            Fn::ImportValue:
              !Sub '${RDSStackNameParameter}-d365DBEndpoint'
          # This variable should be deleted or commented out once proxy goes live.
          DB_PASSWORD:
            !Join
              - ''
              - - '{{resolve:secretsmanager:'
                - Fn::ImportValue:
                    !Sub '${RDSStackNameParameter}-d365RDSSecret'
                - ':SecretString:password}}'
          PROXY_HOST:
            Fn::ImportValue:
              !Sub '${RDSStackNameParameter}-d365RDSProxy1Endpoint'
          DB_PORT: '5432'
          # Secrets stored in AWS Systems Manager Parameter Store.
          DB_USER: "{{resolve:ssm:d365_db_user:1}}"
          DB_NAME: "{{resolve:ssm:d365_db_name:1}}"
      Layers:
        - !Ref d365Layer1
      Role: !GetAtt d365IAMLambdaRole.Arn
      Runtime: nodejs12.x
      # AWS X-Ray tracing configuration.
      # TracingConfig:
      #   Mode: Active
      # This DLQ config is for failed ASYNC invocations. In our setup, Lambda is polling our SQS queue and invoking our functions synchronously.
      # DeadLetterConfig:
      #   TargetArn: !GetAtt MyDeadLetterQueue.Arn
      VpcConfig: 
        SecurityGroupIds: 
          - Fn::ImportValue:
              !Sub '${VPCStackNameParameter}-d365LambdaSecurityGroup'
        SubnetIds: 
          - Fn::ImportValue:
              !Sub '${VPCStackNameParameter}-d365PrivateSubnet1'
          - Fn::ImportValue:
              !Sub '${VPCStackNameParameter}-d365PrivateSubnet2'
  
  d365Function2Version1:
    Type: AWS::Lambda::Version
    Properties:
      FunctionName: !Ref d365Function2
      Description: v1

  d365Function2Alias1:
    Type: AWS::Lambda::Alias
    Properties:
      FunctionName: !Ref d365Function2
      FunctionVersion: !GetAtt d365Function2Version1.Version
      Name: ALIAS2
  
  # Make d365Function2 aware of events coming from our SQS queue.
  d365EventSourceMapping: 
    Type: AWS::Lambda::EventSourceMapping
    Properties: 
      # Min 1, Max 10 for SQS FIFO. Update this once lambda function can process events in batches.
      BatchSize: '1'
      EventSourceArn: !GetAtt d365SourceQueue.Arn
      FunctionName: !Ref d365Function2Alias1

  # function3, lambda authorizer
  d365Function3:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Code:
        S3Bucket: democracy365private
        S3Key: d365_function3.zip
      Environment:
        Variables:
          REGION: us-east-1
          # This variable should be deleted or commented out once proxy goes live.
          DB_HOST:
            Fn::ImportValue:
              !Sub '${RDSStackNameParameter}-d365DBEndpoint'
          # This variable should be deleted or commented out once proxy goes live.
          DB_PASSWORD:
            !Join
              - ''
              - - '{{resolve:secretsmanager:'
                - Fn::ImportValue:
                    !Sub '${RDSStackNameParameter}-d365RDSSecret'
                - ':SecretString:password}}'
          PROXY_HOST:
            Fn::ImportValue:
              !Sub '${RDSStackNameParameter}-d365RDSProxy1Endpoint'
          DB_PORT: '5432'
          # Secrets stored in AWS Systems Manager Parameter Store.
          DB_USER: "{{resolve:ssm:d365_db_user:1}}"
          DB_NAME: "{{resolve:ssm:d365_db_name:1}}"
          KMS_KEY_ID: !Ref d365KMSKey
      Layers:
        - !Ref d365Layer1
      Role: !GetAtt d365IAMLambdaRole.Arn
      Runtime: nodejs12.x
      VpcConfig: 
        SecurityGroupIds: 
          - Fn::ImportValue:
              !Sub '${VPCStackNameParameter}-d365LambdaSecurityGroup'
        SubnetIds: 
          - Fn::ImportValue:
              !Sub '${VPCStackNameParameter}-d365PrivateSubnet1'
          - Fn::ImportValue:
              !Sub '${VPCStackNameParameter}-d365PrivateSubnet2'
  
  d365Function3Version1:
    Type: AWS::Lambda::Version
    Properties:
      FunctionName: !Ref d365Function3
      Description: v1

  d365Function3Alias1:
    Type: AWS::Lambda::Alias
    Properties:
      FunctionName: !Ref d365Function3
      FunctionVersion: !GetAtt d365Function3Version1.Version
      Name: ALIAS3

  # function4, signin1
  d365Function4:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Code:
        S3Bucket: democracy365private
        S3Key: d365_function4.zip
      Environment:
        Variables:
          REGION: us-east-1
          # This variable should be deleted or commented out once proxy goes live.
          DB_HOST:
            Fn::ImportValue:
              !Sub '${RDSStackNameParameter}-d365DBEndpoint'
          # This variable should be deleted or commented out once proxy goes live.
          DB_PASSWORD:
            !Join
              - ''
              - - '{{resolve:secretsmanager:'
                - Fn::ImportValue:
                    !Sub '${RDSStackNameParameter}-d365RDSSecret'
                - ':SecretString:password}}'
          PROXY_HOST:
            Fn::ImportValue:
              !Sub '${RDSStackNameParameter}-d365RDSProxy1Endpoint'
          DB_PORT: '5432'
          # Secrets stored in AWS Systems Manager Parameter Store.
          DB_USER: "{{resolve:ssm:d365_db_user:1}}"
          DB_NAME: "{{resolve:ssm:d365_db_name:1}}"
          TEST_EMAIL_ADDR: "{{resolve:ssm:d365_test_email_addr:1}}"
          KMS_KEY_ID: !Ref d365KMSKey
      Layers:
        - !Ref d365Layer1
      Role: !GetAtt d365IAMLambdaRole.Arn
      Runtime: nodejs12.x
      VpcConfig: 
        SecurityGroupIds: 
          - Fn::ImportValue:
              !Sub '${VPCStackNameParameter}-d365LambdaSecurityGroup'
        SubnetIds: 
          - Fn::ImportValue:
              !Sub '${VPCStackNameParameter}-d365PrivateSubnet1'
          - Fn::ImportValue:
              !Sub '${VPCStackNameParameter}-d365PrivateSubnet2'
  
  d365Function4Version1:
    Type: AWS::Lambda::Version
    Properties:
      FunctionName: !Ref d365Function4
      Description: v1

  d365Function4Alias1:
    Type: AWS::Lambda::Alias
    Properties:
      FunctionName: !Ref d365Function4
      FunctionVersion: !GetAtt d365Function4Version1.Version
      Name: ALIAS4

  # function5, signin2
  d365Function5:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Code:
        S3Bucket: democracy365private
        S3Key: d365_function5.zip
      Environment:
        Variables:
          REGION: us-east-1
          # This variable should be deleted or commented out once proxy goes live.
          DB_HOST:
            Fn::ImportValue:
              !Sub '${RDSStackNameParameter}-d365DBEndpoint'
          # This variable should be deleted or commented out once proxy goes live.
          DB_PASSWORD:
            !Join
              - ''
              - - '{{resolve:secretsmanager:'
                - Fn::ImportValue:
                    !Sub '${RDSStackNameParameter}-d365RDSSecret'
                - ':SecretString:password}}'
          PROXY_HOST:
            Fn::ImportValue:
              !Sub '${RDSStackNameParameter}-d365RDSProxy1Endpoint'
          DB_PORT: '5432'
          # Secrets stored in AWS Systems Manager Parameter Store.
          DB_USER: "{{resolve:ssm:d365_db_user:1}}"
          DB_NAME: "{{resolve:ssm:d365_db_name:1}}"
          KMS_KEY_ID: !Ref d365KMSKey
      Layers:
        - !Ref d365Layer1
      Role: !GetAtt d365IAMLambdaRole.Arn
      Runtime: nodejs12.x
      VpcConfig: 
        SecurityGroupIds: 
          - Fn::ImportValue:
              !Sub '${VPCStackNameParameter}-d365LambdaSecurityGroup'
        SubnetIds: 
          - Fn::ImportValue:
              !Sub '${VPCStackNameParameter}-d365PrivateSubnet1'
          - Fn::ImportValue:
              !Sub '${VPCStackNameParameter}-d365PrivateSubnet2'
  
  d365Function5Version1:
    Type: AWS::Lambda::Version
    Properties:
      FunctionName: !Ref d365Function5
      Description: v1

  d365Function5Alias1:
    Type: AWS::Lambda::Alias
    Properties:
      FunctionName: !Ref d365Function5
      FunctionVersion: !GetAtt d365Function5Version1.Version
      Name: ALIAS5

  # function6, signup
  d365Function6:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Code:
        S3Bucket: democracy365private
        S3Key: d365_function6.zip
      Environment:
        Variables:
          REGION: us-east-1
          # This variable should be deleted or commented out once proxy goes live.
          DB_HOST:
            Fn::ImportValue:
              !Sub '${RDSStackNameParameter}-d365DBEndpoint'
          # This variable should be deleted or commented out once proxy goes live.
          DB_PASSWORD:
            !Join
              - ''
              - - '{{resolve:secretsmanager:'
                - Fn::ImportValue:
                    !Sub '${RDSStackNameParameter}-d365RDSSecret'
                - ':SecretString:password}}'
          PROXY_HOST:
            Fn::ImportValue:
              !Sub '${RDSStackNameParameter}-d365RDSProxy1Endpoint'
          DB_PORT: '5432'
          # Secrets stored in AWS Systems Manager Parameter Store.
          DB_USER: "{{resolve:ssm:d365_db_user:1}}"
          DB_NAME: "{{resolve:ssm:d365_db_name:1}}"
          TEST_EMAIL_ADDR: "{{resolve:ssm:d365_test_email_addr:1}}"
          KMS_KEY_ID: !Ref d365KMSKey
      Layers:
        - !Ref d365Layer1
      Role: !GetAtt d365IAMLambdaRole.Arn
      Runtime: nodejs12.x
      VpcConfig: 
        SecurityGroupIds: 
          - Fn::ImportValue:
              !Sub '${VPCStackNameParameter}-d365LambdaSecurityGroup'
        SubnetIds: 
          - Fn::ImportValue:
              !Sub '${VPCStackNameParameter}-d365PrivateSubnet1'
          - Fn::ImportValue:
              !Sub '${VPCStackNameParameter}-d365PrivateSubnet2'
  
  d365Function6Version1:
    Type: AWS::Lambda::Version
    Properties:
      FunctionName: !Ref d365Function6
      Description: v1

  d365Function6Alias1:
    Type: AWS::Lambda::Alias
    Properties:
      FunctionName: !Ref d365Function6
      FunctionVersion: !GetAtt d365Function6Version1.Version
      Name: ALIAS6
